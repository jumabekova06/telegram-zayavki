import config
import telebot
from telebot import types# –∫–Ω–æ–ø–∫–∏
from string import Template
bot = telebot.TeleBot(config.TOKEN)


bot = telebot.TeleBot(config.TOKEN)
user_dict = {}

class User:
    def __init__(self, city):
        self.city = city

        keys = ['fullname','cource', 'phone', ]
        
        for key in keys:
            self.key = None

@bot.message_handler(commands=['start'])
def welcome(message):
	sti = open('static/itc.png', 'rb')
	bot.send_sticker(message.chat.id, sti)

	# keyboard
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	item1 = types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
	item2 = types.KeyboardButton("–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫")
	item3 = types.KeyboardButton("–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    

	markup.row(item1, item2).add(item3)

	bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –∏ –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö))".format(message.from_user, bot.get_me()),
		parse_mode='html', reply_markup=markup)

@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.text == '–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("Python")
        item2 = types.KeyboardButton("Javascript")
        item3 = types.KeyboardButton("Full-stack")


        markup.row(item1, item2).add(item3)
        bot.send_message(message.chat.id, "  <b>{0.first_name}</b>, –Ω–∞ –∫–∞–∫–∏–µ –∫—É—Ä—Å—ã —è –º–æ–≥—É –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å?!".format(message.from_user, bot.get_me()),
		parse_mode='html', reply_markup=markup)
    if message.text == 'Python':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–î–∞")
        markup.add(item1)
        bot.send_message(message.chat.id, 'üëá–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤?üëá \
            nüí• –û—Å–Ω–æ–≤—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è; \nüí• –í–ª–∞–¥–µ–Ω–∏–µ —è–∑—ã–∫–æ–º - Python;\nüí• –ü–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Ä–∞–±–æ—Ç–∞ —Å Django;\
                nüí• –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ;\nüí• 3 –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ;\nüí• –û–ø—ã—Ç–Ω–æ–≥–æ –º–µ–Ω—Ç–æ—Ä–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –æ–±—É—á–µ–Ω–∏—è;\
                    nüí• –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ –∏—Ç–æ–≥–∞–º –æ–±—É—á–µ–Ω–∏—è;\nüí• –ó–Ω–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç –Ω–æ–≤–∏—á–∫–∞ –¥–æ —É—Ä–æ–≤–Ω—è ¬´Junior¬ª-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞\
                        nüí• –ò –º–Ω–æ–≥–æ–µ, –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ...\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫?', reply_markup=markup)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("Python")
                        


        
    elif message.text == 'Javascript':
        bot.send_message(message.chat.id, 'https://www.inst\nagram.com/p/CR1n2C8r-ge/?utm_source=ig_web_copy_link')
    elif message.text == 'Full-stack':
        bot.send_message(message.chat.id, 'https://www.instagram.com/p/CQlmqMHL1UR/?utm_source=ig_web_copy_link')
    elif message.text == '–ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
        item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
        markup.add(item1, item2)

    elif message.text == '–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' or message.text == '–î–∞':
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('–û—à')
        itembtn2 = types.KeyboardButton('–ë–∏—à–∫–µ–∫')

        markup.add(itembtn1, itembtn2,)

        msg = bot.send_message(message.chat.id, '–í–∞—à –≥–æ—Ä–æ–¥?', reply_markup=markup)
        bot.register_next_step_handler(msg, process_city_step)

def process_city_step(message):
    try:
        chat_id = message.chat.id
        user_dict[chat_id] = User(message.text)

        # —É<zxxx–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardRemove(selective=False)

        msg = bot.send_message(chat_id, '–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ', reply_markup=markup)
        bot.register_next_step_handler(msg, process_fullname_step)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')

def process_fullname_step(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.fullname = message.text
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        itembtn1 = types.KeyboardButton('—Å–∫—Ä–∏–ø—Ç')
        itembtn2 = types.KeyboardButton('–ø–∏—Ç–æ–Ω')
        itembtn3 = types.KeyboardButton('–æ–±–∞')

   
        markup.add(itembtn1, itembtn2, itembtn3, )

        msg = bot.send_message(chat_id, '–ù–∞ –∫–∞–∫–æ–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –≤–∞—Å –∑–∞–ø–∏—Å–∞—Ç—å', reply_markup=markup)
        bot.register_next_step_handler(msg,cource)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')
def cource(message):
    try:
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.cource = message.text

        msg = bot.send_message(chat_id, '–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
        bot.register_next_step_handler(msg, phone)

    except Exception as e:
        bot.reply_to(message, 'ooops!!')

def phone(message):
    try:
        int(message.text)
        chat_id = message.chat.id
        user = user_dict[chat_id]
        user.phone = message.text

        # –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        bot.send_message(chat_id, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞üòä. –ñ–¥–µÃà–º –≤–∞—Å –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 15:00 –ø–æ –∞–¥—Ä–µ—Å—É: —É–ª.–†–∞–∑–∑–∞–∫–æ–≤–∞ 32 (–±–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä ¬´–û–ª–∏–º–ø¬ª), 6 —ç—Ç–∞–∂ 03 –∫–∞–±–∏–Ω–µ—Ç. –£–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–∏–º –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞—Ç—å!ü§ó', parse_mode="Markdown")
        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
        bot.send_message(bot.get_chat('@pilioph').id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown") 
                
    except Exception as e:
        msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
        bot.register_next_step_handler(msg,phone)

def getRegData(user, title, name):
    t = Template('$title *$name* \n –ì–æ—Ä–æ–¥: *$userCity* \n –§–∞–º–∏–ª–∏—è –∏ –∏–º—è: *$fullname* \n –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ: *$cource* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone*  ')

    return t.substitute({
        'title': title,
        'name': name,
        'userCity': user.city,
        'fullname': user.fullname,
        'cource': user.cource,
        'phone':user.phone

    })

bot.polling(none_stop=True)



